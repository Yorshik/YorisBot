import argparse
import datetime
import shlex

import aiogram
from aiogram.types import ChatPermissions, MessageEntity
from core.bot import bot
from ..base import TriggerBase
from utils import database_manager, parse_message


class Custom(TriggerBase):
    def __init__(self):
        self.author = None
        self.user = None
        self.chat = None
        self.period = None
        self.force = None
        self.reason = None
        self.was_admin = None
        self.tg_admin_title = None

    async def matches(self, msg: aiogram.types.Message) -> bool:
        text = msg.text
        if not text.startswith("mute"):
            return False
        args = text[len("mute") :].strip()
        parser = argparse.ArgumentParser(prog="mute", add_help=False)
        parser.add_argument("-minutes", type=int)
        parser.add_argument("-hours", type=int)
        parser.add_argument("-days", type=int)
        parser.add_argument("-weeks", type=int)
        parser.add_argument("-months", type=int)
        parser.add_argument("-reason", type=str)
        parser.add_argument("--force", action="store_true")
        parser.add_argument("-user", required=True)
        try:
            parsed = parser.parse_args(shlex.split(args))
        except SystemExit:
            return False
        self.chat = await database_manager.get_chat(msg.chat.id)
        if not any(
            [parsed.minutes, parsed.hours, parsed.days, parsed.weeks, parsed.months]
        ):
            period = await database_manager.get_mute_period(self.chat)
        else:
            period = 0
            if parsed.minutes:
                period = parsed.minutes
            if parsed.hours:
                period = parsed.hours * 60
            if parsed.days:
                period = parsed.days * 60 * 24
            if parsed.weeks:
                period = parsed.weeks * 60 * 24 * 7
            if parsed.months:
                period = parsed.months * 60 * 24 * 7 * 30
        extracted_user = await parse_message.extract_user(msg)
        self.author = await database_manager.get_user(msg.from_user.id)
        self.user = await database_manager.get_user(extracted_user)
        self.force = parsed.force
        self.reason = parsed.reason
        self.period = period
        member = await bot.get_chat_member(msg.chat.id, msg.from_user.id)
        self.was_admin = member.status in ("administrator", "creator")
        self.tg_admin_title = member.custom_title or ""
        return True
